var Greenspot = Greenspot || {};
(function () {
    Greenspot.Utilities = Greenspot.Utilities || {};
    Greenspot.Utilities.SearchResult = function (page, pageSize) {
        var self = this;
        //page
        self.page = page || 0,
        //pageSize
        self.pageSize = pageSize || 10,
        //items
        self.items = [],
        //has more records
        self.hasMore = true;
        //append
        self.append = function (data) {
            if (data && data.length) {
                self.items = self.items.concat(data);
            }
            self.hasMore = data && data.length == self.pageSize;
        }
    }

    //parse
    Greenspot.Utilities.SearchResult.Parse = function (jsonStr) {
        var obj = JSON.parse(jsonStr);
        var newResult = new Greenspot.Utilities.SearchResult(obj.page, obj.pageSize);
        newResult.items = obj.items;
        newResult.hasMore = obj.hasMore;
        return newResult;
    }
})();
(function () {
    'use strict';

    angular.module('greenspotStall', ['ngMaterial', 'ngMessages'])
       .config(['$locationProvider', '$mdThemingProvider', '$mdIconProvider',
               function config($locationProvider, $mdThemingProvider, $mdIconProvider) {
                   //theme
                   $mdThemingProvider.theme('default')
                       .primaryPalette('cyan', { 'default': '700' })
                       .accentPalette('orange', { 'default': '800' })
                       .backgroundPalette('grey', { 'default': '100' });

                   //
                   $mdIconProvider
                      .defaultIconSet('/static/img/icon/core-icons.svg', 24);

                   //location
                   $locationProvider.html5Mode(true);
               }]);

    angular.module('greenspotStall')
        .service('CommonService', function ($rootScope) {
            /* redirect */
            $rootScope.gotoUrl = function (url) {
                window.location.href = url;
            }


            $rootScope.loadingCircle = false;
            this.showLoading = function () {
                $rootScope.loadingCircle = true;
            }

            this.hideLoading = function () {
                $rootScope.loadingCircle = false;
            }
        });
})();
var Greenspot = Greenspot || {};
(function () {

    Greenspot.CartStallItem = function (stallId, stallName) {
        var self = this;

        self.i = stallId;
        self.n = stallName;
        self.qty = 0;
        self.itms = [];

        self.add = function (nwItem, qty) {
            qty = qty ? qty : 1;
            self.qty += qty;

            var itemAdded = false;
            $.each(self.itms, function (idxItem, item) {
                //existing item
                if (item.i == nwItem.id) {
                    item.q += qty;
                    itemAdded = true;
                    return false;
                }
            });

            if (!itemAdded) {
                //new item
                self.itms.push({ i: nwItem.id, n: nwItem.name, v: nwItem.variant, q: qty, p: nwItem.price, slctd: true });
            }
        };

        self.remove = function (itemId) {
            var removedQty = 0;
            $.each(self.itms, function (idxItem, item) {
                if (item.i == itemId) {
                    var delIdx = self.itms.indexOf(item);
                    if (delIdx > -1) {
                        self.itms.splice(delIdx, 1);
                    }
                    removedQty = item.q;
                    self.qty -= item.q;

                    return false;
                }
            })
            return removedQty;
        }

        self.isChecked = function () {
            var hasSelected = false;
            var hasUnselected = false;
            $.each(self.itms, function (idxItem, item) {
                hasSelected = hasSelected || item.slctd;
                hasUnselected = hasUnselected || !item.slctd;
            })
            return hasSelected && !hasUnselected;
        };

        self.isIndeterminate = function () {
            var hasSelected = false;
            var hasUnselected = false;
            $.each(self.itms, function (idxItem, item) {
                hasSelected = hasSelected || item.slctd;
                hasUnselected = hasUnselected || !item.slctd;
            })
            return hasSelected && hasUnselected;
        }

        self.toggle = function (item) {
            item.slctd = !item.slctd;
        };

        self.toggleAll = function () {
            var checked = self.isIndeterminate() || !self.isChecked();
            $.each(self.itms, function (idxItem, item) {
                item.slctd = checked;
            })
        }

        self.plusOne = function (itemId) {
            $.each(self.itms, function (idxItem, item) {
                if (item.i == itemId && item.q < 99) {
                    item.q++;
                    self.qty++;
                }
            })
        }

        self.minusOne = function (itemId) {
            $.each(self.itms, function (idxItem, item) {
                if (item.i == itemId && item.q > 0) {
                    item.q--;
                    self.qty--;
                }
            })
        }
    }

    Greenspot.Cart = function () {
        var self = this;
        self.stls = [];
        self.qty = 0;

        //remove stall
        self.removeStall = function (stallId) {
            for (var i = 0; i < self.stls.length; i++) {
                if (self.stls[i].i == stallId) {
                    self.qty -= self.stls[i].qty;
                    self.stls.splice(i, 1);
                    break;
                }
            }
            self.writeToCookie();
        };

        //add item
        self.add = function (nwItem, qty) {
            qty = qty ? parseInt(qty) : 1;
            self.qty += qty;

            var isExist = false;
            $.each(self.stls, function (idxStall, stall) {
                if (stall.i == nwItem.stallId) {
                    //existing stl
                    isExist = true;
                    stall.add(nwItem, qty);
                    return false;
                }
            });

            if (!isExist) {
                var stall = new Greenspot.CartStallItem(nwItem.stallId, nwItem.stallName);
                stall.add(nwItem, qty);
                self.stls.push(stall);
            }

            //new item
            self.writeToCookie();
        };


        //clear
        self.empty = function () {
            self.stls = [];
            self.qty = 0;
            Cookies.remove("cart");
        };

        //remove item
        self.remove = function (stall, itemId) {
            self.qty -= stall.remove(itemId);
            //remove empty stall
            if (stall.itms.length == 0) {
                var delIdx = self.stls.indexOf(stall);
                if (delIdx > -1) {
                    self.stls.splice(delIdx, 1);
                }
            }

            self.writeToCookie();
        };

        //this
        self.plusOne = function (stall, itemId) {
            stall.plusOne(itemId);
            self.qty++;

            self.writeToCookie();
        };

        //
        self.minusOne = function (stall, itemId) {
            stall.minusOne(itemId);
            self.qty--;

            self.writeToCookie();
        };


        self.loadFromCookie = function () {
            var str = Cookies.get('cart');

            if (!str) {
                return;
            }
            var c = $.parseJSON(str);
            self.stls = [];

            //all stall
            $.each(c.stls, function (idxStall, stall) {
                var stallItem = new Greenspot.CartStallItem(stall.i, stall.n);
                stallItem.qty = stall.qty;
                stallItem.amt = stall.amt;
                stallItem.itms = stall.itms;
                self.stls.push(stallItem);
            });

            self.qty = c.qty;

        };

        self.writeToCookie = function () {
            Cookies.set("cart", self, { expires: 14 });
        };

        self.isChecked = function () {
            var hasChecked = false;
            var hasUnchecked = false;
            $.each(self.stls, function (idxStall, stall) {
                hasChecked = hasChecked || stall.isChecked();
                hasUnchecked = hasUnchecked || !stall.isChecked();
            })
            return hasChecked && !hasUnchecked;
        };

        self.toggleAll = function () {
            var checked = !self.isChecked();
            $.each(self.stls, function (idxStall, stall) {
                $.each(stall.itms, function (idxItem, item) {
                    item.slctd = checked;
                })
            });
        }

        self.totalAmount = function () {
            var orders = self.getOrders();
            return orders.amt;
        }

        self.getOrders = function () {
            var orders = new Greenspot.SimpleOrderCollection();
            $.each(self.stls, function (idxStall, stall) {
                //new order
                var order = new Greenspot.SimpleOrder(stall.i, stall.n);

                $.each(stall.itms, function (idxItem, item) {
                    if (item.slctd) {
                        order.AddItem(item);
                    }
                })

                if (order.qty > 0) {
                    orders.AddOrder(order);
                }
            });

            return orders;
        }
    };

    Greenspot.SimpleOrder = function (stallId, stallName) {
        var self = this;
        self.i = stallId;
        self.n = stallName;
        self.qty = 0;
        self.amt = 0;
        self.itms = [];

        self.AddItem = function (item) {
            self.itms.push(item);
            self.qty += item.q;
            self.amt += item.p * item.q;
        }
    }

    Greenspot.SimpleOrderCollection = function () {
        var self = this;
        self.orders = [];
        self.amt = 0;

        self.AddOrder = function (order) {
            self.orders.push(order);
            self.qty += order.qty;
            self.amt += order.amt;
        }
    }
})();
var Greenspot = Greenspot || {};
(function () {
    Greenspot.Order = function (data, $http) {
        var self = this;
        self.$http = $http;
        self.i = data.i;
        self.n = data.n;
        self.qty = data.qty;
        self.amt = data.amt;
        self.itms = data.itms;
        self.deliveryOptionCollections = [];
        self.pickUpOptionCollections = [];
        self.optionCollections = [];
        self.selectedOptionCollection = null;
        self.selectedOption = null;

        /* set delivery address */
        self.setDeliveryAddress = function (address) {
            self.deliveryAddress = address;
            self.optionCollections = [];
            self.selectedOptionCollection = null;
            self.selectedOption = null;
            self.loadDeliveryOptions();
        }

        /* get delivery option*/
        self.loadDeliveryOptions = function () {
            //clear
            self.deliveryOptionCollections = [];

            if (!self.deliveryAddress) {
                return;
            }

            //get delivery options
            var url = '/api/stall/GetDeliveryOptions/' + self.i + "?country=" + self.deliveryAddress.CountryId;
            url += "&city=" + self.deliveryAddress.City;
            url += "&suburb=" + self.deliveryAddress.Suburb;
            url += "&area=" + self.deliveryAddress.Area;

            self.$http.get(url).success(function (result) {
                if (result.Succeeded) {
                    self.deliveryOptionCollections = result.Data;
                    if (self.deliveryOptionCollections.length > 0) {
                        self.optionCollections = self.deliveryOptionCollections;
                        self.selectedOptionCollection = self.optionCollections[0];
                        self.optionCollectionChanged();
                    }
                }
                else {
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            });
        }


        /*get pickup option*/
        self.loadPickUpOptions = function () {
            //clear
            self.pickUpOptionCollections = [];

            //get pick up option
            var url = '/api/stall/GetPickUpOptions/' + self.i;

            $http.get(url).success(function (result) {
                if (result.Succeeded) {
                    self.pickUpOptionCollections = result.Data;
                }
                else {
                    //$window.alert(result.Message);
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            });
        }

        self.hasDeliveryOption = function () {
            return self.deliveryOptionCollections && self.deliveryOptionCollections.length > 0;
        }

        self.hasPickUpOption = function () {
            return self.deliveryOptionCollections && self.pickUpOptionCollections.length > 0;
        }


        /* select delivery option collection*/
        self.optionCollectionChanged = function () {
            self.selectedOption = self.selectedOptionCollection.ApplicableOpts[0];
            //self.optionChanged();
        }

        /* select delivery option*/
        self.optionChanged = function () {
            //console.log(self.selectedOption);
        }

        /* total amount*/
        self.totalAmount = function () {
            return self.amt + (self.selectedOption ? self.selectedOption.Fee : 0);
        }

        self.setIsPickup = function (isPickup) {
            self.isPickup = isPickup;
            self.optionCollections = isPickup ? self.pickUpOptionCollections : self.deliveryOptionCollections;
            self.selectedOptionCollection = self.optionCollections[0];
            self.optionCollectionChanged();
        }

        self.loadPickUpOptions();
    }
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');
    module.controller('CustomerAddressController',
        ['$scope', '$http', '$location', '$window', '$mdDialog',
        function ($scope, $http, $location, $window, $mdDialog) {
            var vm = this;
            ///**********************************
            //address management
            //***********************************
            /* redirect */
            vm.gotoUrl = function (url) {
                window.location.href = url;
            }


            /* address management */
            vm.init_address = function () {
                vm.loadDeliveryAddress();
            }

            /*new address*/
            vm.editAddress = {};

            /* load address */
            vm.loadDeliveryAddress = function () {
                //load address
                $http.get('/customer/DeliveryAddresses').success(function (result) {
                    if (result.Succeeded) {
                        vm.deliveryAddresses = result.Data;
                        if (vm.deliveryAddresses.length > 0) {
                            vm.deliveryAddress = vm.deliveryAddresses[0];
                        }
                    }
                    else {
                        console.log(result.Message);
                    }
                }).error(function (error) {
                    console.log(error);
                });
            }

            //select address
            vm.addressSelected = function () {
                //update address
                $scope.$apply(function () {
                    vm.editAddress.Address = vm.editAddress.AddressObject.FullAddress;
                });
            }

            //select area
            vm.selectArea = function (ev) {
                //got potential address

                //show dialog
                $mdDialog.show({
                    controller: 'DialogController',
                    controllerAs: 'ctrl',
                    templateUrl: '/SelectArea.tmpl.html',
                    parent: angular.element(document.body),
                    targetEvent: ev
                })
                .then(function (answer) {
                    console.log(answer);
                    vm.editAddress.Area = answer.en;
                    vm.editAddress.SelectedAreaName = answer.cn;
                });
            }

            //
            vm.addAddress = function (ev) {

                if (!vm.editAddress.AddressObject) {
                    alert("请选择地址");
                    return false;
                }

                //get area of address
                if (!vm.editAddress.Area) {
                    var url = '/api/address/Suburb2Area?country=NZ&city=' + vm.editAddress.AddressObject.CityTown;
                    url += "&suburb=" + vm.editAddress.AddressObject.Suburb;
                    $http.get(url).success(function (result) {
                        if (result.Succeeded) {
                            vm.editAddress.Area = result.Data;
                            //add address
                            vm.submitAddress();
                        }
                        else {
                            //select area
                            vm.selectArea(ev);
                        }
                    }).error(function (error) {
                        //select area
                        vm.selectArea(ev);
                    });
                } else {
                    //add address
                    vm.submitAddress();
                }
            }

            //submit address
            vm.submitAddress = function () {
                $http.post('/customer/addAddress', vm.editAddress).success(function (result) {
                    if (result.Succeeded) {
                        vm.loadDeliveryAddress();
                        vm.gotoUrl('/customer/checkout');
                    }
                    else {
                        alert(result.Message);
                    }
                }).error(function (error) {
                    alert(error);
                });
            }
        }]);
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');
    module.controller('CustomerController',
        ['$scope', '$http', 'CommonService',
    function ($scope, $http, commSrv) {
        var vm = this;

        /* init */
        vm.init = function () {
            /*cart*/
            vm.cart = new Greenspot.Cart();
            vm.cart.loadFromCookie();
        }

        vm.removeStallCookie = function (stallId) {
            vm.cart.loadFromCookie();
            vm.cart.removeStall(stallId);
        }

        ///**********************************
        //stall home page
        //***********************************
        /*stall home page */
        vm.init_stallHome = function (stallId) {
            vm.init();
            vm.loadStallProducts(stallId);
        }

        /* load address */
        vm.loadStallProducts = function (stallId) {
            commSrv.showLoading();
            //load address
            $http.get('/api/stall/GetStallProducts/' + stallId).success(function (result) {
                if (result.Succeeded) {
                    vm.currentStall = result.Data;
                }
                else {
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            }).finally(function () {
                commSrv.hideLoading();
            });
        }

        ///**********************************
        //check out
        //***********************************
        /* checkout */
        vm.checkOut = function () {
            //load items
            $http.post('/customer/CheckStock', vm.cart.getOrders()).success(function (result) {
                if (result.Succeeded) {
                    //redirect to vent page
                    window.location.href = "/customer/Checkout";
                }
                else {
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            });
        }


        /* checkout init */
        vm.init_checkout = function (orderJson) {
            vm.orders = [];
            $.each(orderJson.orders, function (orderIdx, order) {
                vm.orders.push(new Greenspot.Order(order, $http));
            });

            vm.loadDeliveryAddress();
        }

        ///**********************************
        //delivery options
        //***********************************
        /* load address */
        vm.loadDeliveryAddress = function () {
            //load address
            $http.get('/customer/DeliveryAddresses').success(function (result) {
                if (result.Succeeded) {
                    vm.deliveryAddresses = result.Data;
                    if (vm.deliveryAddresses.length > 0) {
                        vm.selectedDeliveryAddress = vm.deliveryAddresses[0];
                        vm.deliveryAddressChanged();
                    }
                }
                else {
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            });
        }

        //select delivery address
        vm.deliveryAddressChanged = function () {
            $.each(vm.orders, function (orderIdx, order) {
                order.setDeliveryAddress(vm.selectedDeliveryAddress);
            });
        }

        //
        vm.allDeliverySelected = function () {
            var len = vm.orders.length;
            for (var i = 0; i < len; i++) {
                if (!vm.orders[i].selectedOption) {
                    return false;
                }
            }
            return true;
        }


        /* pay */
        vm.pay = function () {
            $.each(vm.orders, function (orderIdx, order) {
                order.deliveryOptionCollections = null;
                order.pickUpOptionCollections = null;
                order.optionCollections = null;
                order.selectedOptionCollection = null;
            });

            //load items
            $http.post('/customer/Pay', vm.orders).success(function (result) {
                if (result.Succeeded) {
                    //redirect to vent page
                    window.location.href = result.Data;
                }
                else {
                    console.log(result.Message);
                }
            }).error(function (error) {
                console.log(error);
            });
        }
    }]);
})();
(function () {
    'use strict';

    var module = angular.module('greenspotStall');
    module.controller('DialogController', ['$scope', '$mdDialog',
         function ($scope, $mdDialog) {
             $scope.hide = function () {
                 $mdDialog.hide();
             };
             $scope.cancel = function () {
                 $mdDialog.cancel();
             };
             $scope.answer = function (answer) {
                 $mdDialog.hide(answer);
             };
         }]);
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');
    module.controller('HomeController', ['$window', '$location', '$http', 'CommonService',
        function ($window, $location, $http, comSrv) {
            var vm = this;

            //search condition
            vm.searchCondition = {
                isRecommend: true,
                category: "T",
                area: "NZ-Auckland",
                keyword: "",
                init: function (category) {
                    this.category = category;
                    var params = $location.search();
                    this.isRecommend = params.r != 'false';
                    this.area = params.a || this.area;
                    this.keyword = params.k || this.keyword;
                },
                queryString: function () {
                    return '?r=' + this.isRecommend + '&c=' + this.category + '&a=' + this.area + '&k=' + this.keyword;
                },
                queryObject: function () {
                    return { 'r': this.isRecommend, 'c': this.category, 'a': this.area, 'k': this.keyword };
                }
            }

            //parse the url

            //init 
            vm.init_cart = function () {
                //init cart
                vm.cart = new Greenspot.Cart();
                vm.cart.loadFromCookie();
            }

            //T - takeaway, H - homemade
            vm.init = function (category) {

                //init condition
                vm.searchCondition.init(category);
                if (vm.searchCondition.isRecommend) {
                    //load recommend
                    vm.loadRecommendStalls();
                } else {
                    //reload
                    if (!vm.restoreSearchResult()) {
                        //research
                        vm.search();
                    }
                }

                //init cart
                vm.init_cart();
            }


            //load recommend
            vm.loadRecommendStalls = function () {
                comSrv.showLoading();
                vm.recommendStalls = null;

                //require url
                var url = '/api/home/recommend?c=' + vm.searchCondition.category + '&a=' + vm.searchCondition.area;

                //load
                $http.get(url).success(function (result) {
                    if (result.Succeeded) {
                        vm.recommendStalls = result.Data;
                    }
                    else {
                        console.log(result.Message);
                    }
                }).error(function (error) {
                    console.log(error)
                }).finally(function () {
                    comSrv.hideLoading();
                });
            }


            /*
            === search ===
            */
            //search product
            vm.searchProduct = function (page, pageSize) {
                page = page || 0;
                pageSize = pageSize || 10;
                if (page == 0) {
                    vm.matchedProducts = new Greenspot.Utilities.SearchResult(page, pageSize);
                } else {
                    vm.matchedProducts.page = page;
                    vm.matchedProducts.pageSize = pageSize;
                }


                $http.get('/api/home/SearchProduct' + vm.searchCondition.queryString() + '&p=' + page + '&ps=' + pageSize).success(function (result) {
                    if (result.Succeeded) {
                        vm.matchedProducts.append(result.Data);

                        //store result
                        if ($window.localStorage && vm.matchedProducts) {
                            $window.localStorage.setItem("matched_products", JSON.stringify(vm.matchedProducts));
                        }
                    }
                    else {
                        console.log(result.Message);
                    }
                }).error(function (error) {
                    console.log(error)
                }).finally(function () {
                    comSrv.hideLoading();
                });
            }

            //load more product
            vm.loadMoreProduct = function () {
                comSrv.showLoading();
                vm.searchProduct(vm.matchedProducts.page + 1, vm.matchedProducts.pageSize);
            }

            //search stall
            vm.searchStall = function (page, pageSize) {
                page = page || 0;
                pageSize = pageSize || 10;

                if (page == 0) {
                    vm.matchedStalls = new Greenspot.Utilities.SearchResult(page, pageSize);
                } else {
                    vm.matchedStalls.page = page;
                    vm.matchedStalls.pageSize = pageSize;
                }

                //search stall
                $http.get('/api/home/SearchStall' + vm.searchCondition.queryString() + '&p=' + page + '&ps=' + pageSize).success(function (result) {
                    if (result.Succeeded) {

                        vm.matchedStalls.append(result.Data);
                        //store result
                        if ($window.localStorage && vm.matchedStalls) {
                            $window.localStorage.setItem("matched_stalls", JSON.stringify(vm.matchedStalls));
                        }
                    }
                    else {
                        console.log(result.Message);
                    }
                }).error(function (error) {
                    console.log(error)
                }).finally(function () {
                    comSrv.hideLoading();
                });
            }

            //load more stall
            vm.loadMoreStall = function () {
                comSrv.showLoading();
                vm.searchStall(vm.matchedStalls.page + 1, vm.matchedStalls.pageSize);
            }

            //search all
            vm.search = function (stallPageSize, productPageSize) {
                comSrv.showLoading();
                vm.searchCondition.isRecommend = false;
                vm.recommendStalls = null;

                //store search condition
                if ($window.localStorage) {
                    $window.localStorage.setItem("pre_condition", JSON.stringify(vm.searchCondition));
                }

                //
                vm.searchProduct(0, productPageSize);
                vm.searchStall(0, stallPageSize);

                $location.search(vm.searchCondition.queryObject());

            }

            //restore result
            vm.restoreSearchResult = function () {
                if ($window.localStorage && $window.localStorage["pre_condition"]) {
                    var storedCondition = JSON.parse($window.localStorage["pre_condition"]);
                    if (storedCondition.category != vm.searchCondition.category
                        || storedCondition.area != vm.searchCondition.area
                        || storedCondition.keyword != vm.searchCondition.keyword) {
                        //condition not match
                        return false;
                    }

                    if ($window.localStorage["matched_stalls"]) {
                        vm.matchedStalls = Greenspot.Utilities.SearchResult.Parse($window.localStorage["matched_stalls"]);
                    }

                    if ($window.localStorage["matched_products"]) {
                        vm.matchedProducts = Greenspot.Utilities.SearchResult.Parse($window.localStorage["matched_products"]);
                    }
                }

                return (vm.matchedStalls || false && vm.matchedStalls.length) || (vm.matchedProducts || false && vm.matchedProducts.length);
            }
        }]);
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');
    module.controller(
        'OwnerController',
        ['$http', '$location',
        function ($http, $location) {
            var vm = this;

            //step 1 - Register
            vm.Register = function () {
                //load items
                $http.post('/owner/Register', this.OwnerInfo).success(function (result) {
                    if (result.Succeeded) {
                        //redirect to vent page
                        window.location.href = result.Data;
                    }
                    else {
                        console.log(result.Message);
                    }
                }).error(function (error) {
                    console.log(error);
                });
            };
        }]);
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');

    //directive
    module.directive('googleplace', function () {
        return {
            scope: {
                addrObj: '=addressObject',
                placeOnSelect: '&'
            },
            link: function (scope, element, attrs, model) {

                var options = {
                    types: ['address'],
                    componentRestrictions: { country: 'nz' }
                };
                scope.googlePlaceAutocomplete = new google.maps.places.Autocomplete(element[0], options);
                google.maps.event.addListener(scope.googlePlaceAutocomplete, 'place_changed', function () {
                    scope.$apply(function () {
                        scope.addrObj = scope.googlePlaceAutocomplete.getPlace();
                    });
                    scope.placeOnSelect();
                });
            }
        };
    });
})();
(function () {
    'use strict';
    var module = angular.module('greenspotStall');

    //directive
    module.directive('addressChecker', function () {
        return {
            scope: {
                addrObj: '=addressObject',
                placeOnSelect: '&'
            },

            link: function (scope, element, attrs, model) {

                var checker_options = {
                    max_results: 3,
                    search_type: "Physical",
                    populates: {
                        suburb: "Suburb",
                        city: "CityTown",
                        postcode: "Postcode"
                    },
                    theme: {
                        boxClass: "AddrAutoCompleteBox"
                    },
                    success: function (detail) {
                        scope.$apply(function () {
                            scope.addrObj = detail;
                        });
                        scope.placeOnSelect();
                    }
                };

                scope.addressChecker = new NZPost.Addressing.Checker(element[0],
                    'af322550-a9de-0132-86ce-00505692031f', checker_options);
            }
        };
    });
})();